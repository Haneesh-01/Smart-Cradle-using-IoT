#include <GPRS_Shield_Arduino.h>
#include <SoftwareSerial.h>
#include <Wire.h>

#define PIN_TX    8    /* rx of Arduino (connect tx of gprs to this pin) */
#define PIN_RX    7   /* tx of Arduino (connect rx of gprs to this pin) */
#define BAUDRATE  9600
#define PHONE_NUMBER "9100311084"
#define MESSAGE_LENGTH 160
char message[MESSAGE_LENGTH]; /* buffer for storing message */
char phone[16];         /* buffer for storing phone number */
char datetime[24];        /* buffer for storing phone number */
int8_t messageIndex = 0;

/* Create an object named Sim900_test of the class GPRS */
GPRS Sim900_test(PIN_TX,PIN_RX,BAUDRATE); 

const int8_t lm35_pin = A0;
const int8_t moist_pin = A1;
const int8_t sound_pin = A2;
void setup() {
  Serial.begin(9600); /* Define baud rate for serial communication */
  pinMode(4, OUTPUT);     
  while(!Sim900_test.init())  /* Sim card and signal check, also check if module connected */ 
  {
      delay(1000);
      Serial.println("SIM900 initialization error");
  }  
  Serial.println("SIM900 initialization success");
  memset(message, 0, 160);
}
void loop() {
  int16_t temp_adc_val;
  float temp_val;
  temp_adc_val = analogRead(lm35_pin);  /* Read temperature from LM35 */
  temp_val = (temp_adc_val*4.88);
  temp_val = (temp_val);
  Serial.print("Temperature = ");
  Serial.print(temp_val);
  Serial.print(" Degree Celsius\n");
    if(temp_val>29)
    {
        Serial.println("Need to cool down");
        Serial.println("Calling to inform");
        Sim900_test.callUp(PHONE_NUMBER); /* Call */
        delay(25000);
        Sim900_test.hangup(); /* Hang up the call */
        int8_t count = 0;
        messageIndex = Sim900_test.isSMSunread(); /* Check if new message available */
              while( (messageIndex < 1) && !strstr( message,"Cooldown") )  /* No new unread message */
              {
                  if(count == 5)
                  {
                      messageIndex = Sim900_test.isSMSunread();
                      break;
                  }
                  count++;
                  delay(5000);
                  messageIndex = Sim900_test.isSMSunread();
              }
              while(messageIndex > 0 )  /* New unread message available */
              {
                  Sim900_test.readSMS(messageIndex, message, MESSAGE_LENGTH, phone, datetime);  /* Read message */
                    if(strstr( message,"Cooldown"))
                    {
                        Serial.println("Turning fan ON");
                        digitalWrite(4, HIGH);
                        memset(message, 0, 160);
                    }
                  messageIndex = Sim900_test.isSMSunread();
              }         
        delay(10000);
    }
    else
    {
        Serial.println("Everything is fine");
        digitalWrite(4, LOW); 
    }
  delay(3000);
  float moist_val;
  moist_val = analogRead(moist_pin);  /* Read temperature from LM35 */
  Serial.print("Moisture = ");
  Serial.print(moist_val);
  Serial.print(" g/m3\n");
    if(moist_val>20)
    {
        Serial.println("Need to dry down");
        Serial.println("Calling to inform");
        Sim900_test.callUp(PHONE_NUMBER); /* Call */
        delay(25000);
        Sim900_test.hangup(); /* Hang up the call */
        int8_t count = 0;
        messageIndex = Sim900_test.isSMSunread(); /* Check if new message available */
              while( (messageIndex < 1) && !strstr( message,"Dry") )  /* No new unread message */
              {
                  if(count == 5)
                  {
                      messageIndex = Sim900_test.isSMSunread();
                      break;
                  }
                  count++;
                  delay(5000);
                  messageIndex = Sim900_test.isSMSunread();
              }
              while(messageIndex > 0 )  /* New unread message available */
              {
                  Sim900_test.readSMS(messageIndex, message, MESSAGE_LENGTH, phone, datetime);  /* Read message */
                    if(strstr( message,"Dry"))
                    {
                        Serial.println("Turning motor ON");
                        digitalWrite(5, HIGH);
                        memset(message, 0, 160);
                    }
                  messageIndex = Sim900_test.isSMSunread();
              }         
        delay(10000);
    }
    else
    {
        Serial.println("Everything is fine");
        digitalWrite(4, LOW); 
    }
  delay(3000);
  float sound_val;
  sound_val = analogRead(sound_pin);  /* Read sound in db*/
  Serial.print("sound = ");
  Serial.print(sound_val);
  Serial.print(" Db\n");
    if(sound_val>50)
    {
        Serial.println("Baby is crying");
        Serial.println("Calling to inform");
        Sim900_test.callUp(PHONE_NUMBER); /* Call */
        delay(25000);
        Sim900_test.hangup(); /* Hang up the call */
        int8_t count = 0;
        messageIndex = Sim900_test.isSMSunread(); /* Check if new message available */
              while( (messageIndex < 1) && !strstr( message,"Cradle") )  /* No new unread message */
              {
                  if(count == 5)
                  {
                      messageIndex = Sim900_test.isSMSunread();
                      break;
                  }
                  count++;
                  delay(5000);
                  messageIndex = Sim900_test.isSMSunread();
              }
              while(messageIndex > 0 )  /* New unread message available */
              {
                  Sim900_test.readSMS(messageIndex, message, MESSAGE_LENGTH, phone, datetime);  /* Read message */
                    if(strstr( message,"Cradle"))
                    {
                        Serial.println("Turning cradel on ON");
                        digitalWrite(6, HIGH);
                        memset(message, 0, 160);
                    }
                  messageIndex = Sim900_test.isSMSunread();
              }         
        delay(10000);
    }
    else
    {
        Serial.println("Everything is fine");
        digitalWrite(4, LOW); 
    }
  delay(3000);
}
